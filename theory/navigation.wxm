/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 0.8.5 ] */

/* [wxMaxima: title   start ]
Inertial Navigation Equations
   [wxMaxima: title   end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
if is(commonLoaded#true) then batchload("common.wxm")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
load(diag);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Definitions
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
x : transpose([a,b,c,d,Vn,Ve,Vd,L,l,h]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
u : transpose([wx,wy,wz,fx,fy,fz]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
State Dynamics
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
diff_q_nb : quat_diff(q_nb,w_nb);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
diff_v_n : C_nb_quat.f_b - cross(2*w_ie + w_en,v_n)+g_n;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
diff_L : Vn/(R0+h);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
diff_l : Ve/cos(L)/(R0+h);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
diff_h : -Vd;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
f: transpose([diff_q_nb[1,1],diff_q_nb[2,1],
diff_q_nb[3,1],diff_q_nb[4,1],diff_v_n[1,1],
diff_v_n[2,1],diff_v_n[3,1],diff_L,diff_l,diff_h])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
f_att : transpose(makelist(f[i,1],i,1,4));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
f_vp : transpose(makelist(f[i,1],i,5,10));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Linearization of Error Dyanmics
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
rEquation : [R0+h=R]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_w : subst(rEquation,factor(fullratsimp(jacobian(makelist(f[i,1],i,1,10),
makelist(x[i,1],i,1,10)))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
This expression can be greatly simplified if it is evaluated at wx=wy=wz=0 which is a reasonable approsimation during steady level flight
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
zeroOmega  : [wx=0,wy=0,wz=0]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F : factor(fullratsimp(subst(zeroOmega,F_w)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_att : fullratsimp(subst(rEquation,subst(zeroOmega,jacobian(makelist(f[i,1],i,1,4),
makelist(x[i,1],i,1,4)))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F_vp : factor(fullratsimp(subst(rEquation,subst(zeroOmega,jacobian(makelist(f[i,1],i,5,10),
makelist(x[i,1],i,5,10))))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
The inputs to the ins error dynamics are the gyro and accelerometer measuremenmt errors.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
G : factor(fullratsimp(jacobian(makelist(f[i,1],i,1,10),
makelist(u[i,1],i,1,6))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
G_att : factor(fullratsimp(jacobian(makelist(f[i,1],i,1,4),
makelist(u[i,1],i,1,3))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
G_vp : factor(fullratsimp(jacobian(makelist(f[i,1],i,5,10),
makelist(u[i,1],i,4,6))));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Magnetometer Measurement
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
This matrix represents the measurement magnetic field.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
mag_dec_dip : transpose([cos(dip)*cos(dec),cos(dip)*sin(dec),sin(dip)]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
J_mag : jacobian(makelist(mag_dec_dip[i,1],i,1,3),
[dec,dip]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
R_dec_dip : diag([sigDip^2,sigDec^2]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
R_mag_n : J_mag.R_dec_dip.transpose(J_mag);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Note that R_mag_n is the covariance of the error in the navigation frame. To get the covariance in the body frame
which is measureed you can used the C_nb matrix for a similarity transformation.
R_mag : transpose(C_nb).R_mag_n.C_nb;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
mag : transpose([Bn,Be,Bd]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mag = mag_dec_dip;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
z is the error in measurement of the magnetic field due to attitude errors.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
z_mag : transpose(quat2dcm(q_nb)).mag;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
H_mag : factor(jacobian(makelist(z_mag[i,1],i,1,3),makelist(x[i,1],i,1,10)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
H_mag_att : factor(jacobian(makelist(z_mag[i,1],i,1,3),makelist(x[i,1],i,1,4)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
GPS Measurement
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
z_gps : transpose([Vn,Ve,Vd,L,l,h]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
est_z_gps : z_gps + transpose([e_Vn,e_Ve,e_Vd,e_PosLat/R,e_PosLon/(cos(L)*R),e_h]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
e_gps : est_z_gps - z_gps;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
J_gps : jacobian(makelist(z_gps2[i,1],i,1,6),makelist(x[i,1],i,1,10));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
R_gps: subst([e_Vn^2=sigVel^2,e_Ve^2=sigVel^2,e_Vd^2=sigVel^2,e_PosLat^2=sigPos^2,
e_PosLon^2=sigPos^2,e_h^2=sigAlt^2,e_Vn=0,e_Ve=0,e_Vd=0,
e_PosLat=0,e_PosLon=0,e_h=0],e_gps.transpose(e_gps));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
H_gps : factor(jacobian(makelist(z_gps[i,1],i,1,6),makelist(x[i,1],i,1,10)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
H_gps_vp : factor(jacobian(makelist(z_gps[i,1],i,1,6),makelist(x[i,1],i,5,10)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
File Output
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
fortranPath : "../src/gen_fortran/";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_error_dynamics_F.f90"), f90(F));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_error_dynamics_F_att.f90"), f90(F_att));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_error_dynamics_F_vp.f90"), f90(F_vp));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_error_dynamics_G.f90"), f90(G));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_error_dynamics_G_att.f90"), f90(G_att));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_error_dynamics_G_vp.f90"), f90(G_vp));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_dynamics_f.f90"), f90(f));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_dynamics_f_att.f90"), f90(f_att));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_dynamics_f_vp.f90"), f90(f_vp));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_H_mag.f90"), f90(H_mag));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_H_mag_att.f90"), f90(H_mag_att));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"mag_dec_dip.f90"), f90(mag_dec_dip));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"z_mag.f90"), f90(z_mag));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_R_mag_n.f90"), f90(R_mag_n));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_H_gps.f90"), f90(H_gps));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_H_gps_vp.f90"), f90(H_gps_vp));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_R_gps.f90"), f90(R_gps));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_C_nb_quat.f90"), f90(C_nb_quat));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
with_stdout (sconcat(fortranPath,"ins_C_nb_euler.f90"), f90(C_nb_euler));
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
